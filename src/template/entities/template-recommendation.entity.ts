import {
  Entity,
  PrimaryGeneratedColumn,
  Column,
  CreateDateColumn,
  ManyToOne,
  JoinColumn,
  Index,
} from 'typeorm';
import { ApiProperty } from '@nestjs/swagger';
import { TemplateEntity } from './template.entity';
import { UserEntity } from '../../auth/entities/user.entity';

@Entity('template_recommendations')
export class TemplateRecommendationEntity {
  @ApiProperty({
    description: 'Unique identifier for the template recommendation',
  })
  @PrimaryGeneratedColumn('uuid')
  id: string;

  @ApiProperty({ description: 'Template being recommended' })
  @ManyToOne(() => TemplateEntity, { onDelete: 'CASCADE' })
  @JoinColumn()
  template: TemplateEntity;

  @ApiProperty({ description: 'Template ID' })
  @Column()
  @Index()
  templateId: string;

  @ApiProperty({ description: 'Trainee for whom the template is recommended' })
  @ManyToOne(() => UserEntity, { onDelete: 'CASCADE' })
  @JoinColumn()
  trainee: UserEntity;

  @ApiProperty({ description: 'Trainee ID' })
  @Column()
  @Index()
  traineeId: string;

  @ApiProperty({ description: 'Coach who owns the template' })
  @ManyToOne(() => UserEntity, { onDelete: 'CASCADE' })
  @JoinColumn()
  coach: UserEntity;

  @ApiProperty({ description: 'Coach ID' })
  @Column()
  @Index()
  coachId: string;

  @ApiProperty({ description: 'Recommendation score (0-100)' })
  @Column('decimal', { precision: 5, scale: 2 })
  @Index()
  score: number;

  @ApiProperty({ description: 'Detailed matching criteria and scores' })
  @Column('jsonb')
  matchingDetails: {
    criteriaMatches: {
      age: {
        matched: boolean;
        score: number;
        traineeValue: number;
        templateRange: { min: number; max: number };
      };
      gender: {
        matched: boolean;
        score: number;
        traineeValue: string;
        templateValues: string[];
      };
      fitnessLevel: {
        matched: boolean;
        score: number;
        traineeValue: string;
        templateValues: string[];
      };
      goals: {
        matched: boolean;
        score: number;
        traineeGoals: string[];
        templateGoals: string[];
        overlap: string[];
      };
      weight: {
        matched: boolean;
        score: number;
        traineeValue?: number;
        templateRange?: { min: number; max: number };
      };
      height: {
        matched: boolean;
        score: number;
        traineeValue?: number;
        templateRange?: { min: number; max: number };
      };
      activityLevel: {
        matched: boolean;
        score: number;
        traineeValue?: string;
        templateValues?: string[];
      };
      dietaryRestrictions: {
        matched: boolean;
        score: number;
        traineeRestrictions: string[];
        templateRestrictions: string[];
        conflicts: string[];
      };
      equipmentAvailability: {
        matched: boolean;
        score: number;
        traineeEquipment: string[];
        requiredEquipment: string[];
        missingEquipment: string[];
      };
      timeAvailability: {
        matched: boolean;
        score: number;
        traineeAvailability?: {
          minutesPerDay: number;
          daysPerWeek: number;
        };
        templateRequirement?: {
          minMinutesPerDay: number;
          maxMinutesPerDay: number;
          daysPerWeek: number;
        };
      };
    };
    overallMatchScore: number;
    successProbability: number; // Based on historical data
    recommendationReason: string;
    potentialChallenges?: string[];
    suggestedModifications?: string[];
  };

  @ApiProperty({ description: 'Reason for the recommendation' })
  @Column('text')
  reason: string;

  @ApiProperty({
    description: 'Confidence level of the recommendation (0-100)',
  })
  @Column('decimal', { precision: 5, scale: 2 })
  confidence: number;

  @ApiProperty({
    description: 'Whether the recommendation was viewed by the coach',
  })
  @Column({ default: false })
  @Index()
  viewed: boolean;

  @ApiProperty({
    description: 'Whether the recommendation was accepted/assigned',
  })
  @Column({ default: false })
  @Index()
  accepted: boolean;

  @ApiProperty({ description: 'Whether the recommendation was dismissed' })
  @Column({ default: false })
  @Index()
  dismissed: boolean;

  @ApiProperty({ description: 'Coach feedback on the recommendation' })
  @Column('text', { nullable: true })
  coachFeedback?: string;

  @ApiProperty({ description: 'Automatic recommendation or manual trigger' })
  @Column({ default: true })
  isAutoGenerated: boolean;

  @ApiProperty({ description: 'Expiration date for the recommendation' })
  @Column({ type: 'timestamp', nullable: true })
  expiresAt?: Date;

  @ApiProperty({ description: 'Recommendation creation timestamp' })
  @CreateDateColumn()
  createdAt: Date;

  @ApiProperty({ description: 'When the recommendation was viewed' })
  @Column({ type: 'timestamp', nullable: true })
  viewedAt?: Date;

  @ApiProperty({ description: 'When the recommendation was accepted' })
  @Column({ type: 'timestamp', nullable: true })
  acceptedAt?: Date;

  @ApiProperty({ description: 'When the recommendation was dismissed' })
  @Column({ type: 'timestamp', nullable: true })
  dismissedAt?: Date;
}
