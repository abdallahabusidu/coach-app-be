openapi: 3.0.0
info:
  title: User Auth API
  version: 1.0.0
  description: Postman collection for User Authentication and Verification
servers:
  - url: http://localhost:3000 # Replace with your actual base URL

paths:
  /auth/register:
    post:
      tags:
        - auth
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterDto'
            examples:
              success:
                value:
                  firstName: "John"
                  lastName: "Doe"
                  email: "john.doe@example.com"
                  phone: "+12025550179"
                  password: "Password123!"
                  role: "USER"
      responses:
        '201':
          description: User has been successfully registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponseDto'
        '409':
          description: User with this email or phone already exists

  /auth/login:
    post:
      tags:
        - auth
      summary: Login with email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDto'
            examples:
              success:
                value:
                  email: "john.doe@example.com"
                  password: "Password123!"
      responses:
        '200':
          description: User has been successfully authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponseDto'
        '401':
          description: Invalid credentials

  /auth/login-with-guard:
    post:
      tags:
        - auth
      summary: Login using guard-based authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDto' # Same as login
            examples:
              success:
                value:
                  email: "john.doe@example.com"
                  password: "Password123!"
      responses:
        '200':
          description: User has been successfully authenticated through guard
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponseDto'
        '401':
          description: Invalid credentials

  /auth/refresh-token:
    post:
      tags:
        - auth
      summary: Refresh access token using refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenDto'
            examples:
              success:
                value:
                  refreshToken: "your_refresh_token_here"
      responses:
        '200':
          description: Tokens have been successfully refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponseDto'
        '401':
          description: Invalid refresh token

  /verification/email/request:
    post:
      tags:
        - verification
      summary: Request email verification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestEmailVerificationDto'
            examples:
              success:
                value:
                  email: "john.doe@example.com"
      responses:
        '200':
          description: Email verification requested successfully.

  /verification/email/verify:
    post:
      tags:
        - verification
      summary: Verify email with token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmailDto'
            examples:
              success:
                value:
                  token: "your_email_verification_token_here"
      responses:
        '200':
          description: Email verified successfully.
        '401':
          description: Invalid or expired verification token.

  /verification/email/generate-token:
    post:
      tags:
        - verification
      summary: Generate a new email verification token (authenticated users)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Token generated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "new_email_verification_token"
        '401':
          description: Unauthorized

  /verification/phone/request:
    post:
      tags:
        - verification
      summary: Request phone verification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestPhoneVerificationDto'
            examples:
              success:
                value:
                  phone: "+12025550179"
      responses:
        '200':
          description: Phone verification requested successfully.

  /verification/phone/verify:
    post:
      tags:
        - verification
      summary: Verify phone with code
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyPhoneDto'
            examples:
              success:
                value:
                  phone: "+12025550179"
                  code: "123456"
      responses:
        '200':
          description: Phone verified successfully.
        '401':
          description: Invalid or expired verification code.

  /verification/phone/generate-code:
    post:
      tags:
        - verification
      summary: Generate a new phone verification code (authenticated users)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Code generated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "654321"
        '401':
          description: Unauthorized

  /verification/status:
    get:
      tags:
        - verification
      summary: Check verification status
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Returns verification status for email and phone.
          content:
            application/json:
              schema:
                type: object # Define based on actual response from getVerificationStatus
                properties:
                  isEmailVerified:
                    type: boolean
                    example: true
                  isPhoneVerified:
                    type: boolean
                    example: false
        '401':
          description: Unauthorized

  # Client Onboarding Endpoints
  /clients/onboarding/profile:
    patch:
      tags:
        - client-onboarding
      summary: 'Step 1: Basic profile info'
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OnboardingStep1ProfileDto'
            examples:
              success:
                value:
                  gender: "male"
                  location: "Riyadh, Saudi Arabia"
                  age: 28
                  weight: 75
                  height: 175
                  fitnessGoal: "Lose weight"
      responses:
        '200':
          description: Profile info updated
          content:
            application/json:
              schema:
                type: object # Define based on actual ClientProfile entity
                properties:
                  clientProfile:
                    type: object
        '401':
          description: Unauthorized

  /clients/onboarding/fitness-goals:
    patch:
      tags:
        - client-onboarding
      summary: 'Step 2: Fitness goals'
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OnboardingStep2FitnessGoalsDto'
            examples:
              success:
                value:
                  fitnessGoals: "Lose weight, Build muscle"
                  otherGoal: ""
                  fitnessLevel: "Rookie"
                  bodyShape: "Athletic"
      responses:
        '200':
          description: Fitness goals updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  clientProfile:
                    type: object
        '401':
          description: Unauthorized

  /clients/onboarding/dietary-habits:
    patch:
      tags:
        - client-onboarding
      summary: 'Step 3: Dietary habits'
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OnboardingStep3DietaryDto'
            examples:
              success:
                value:
                  mealsPerDay: 3
                  specificDiet: false
                  exerciseFrequency: 4
                  sessionDuration: 60
                  gymAccess: true
      responses:
        '200':
          description: Dietary habits updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  clientProfile:
                    type: object
        '401':
          description: Unauthorized

  /clients/onboarding/health-conditions:
    patch:
      tags:
        - client-onboarding
      summary: 'Step 4: Health conditions'
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OnboardingStep4HealthDto'
            examples:
              success:
                value:
                  healthConsiderations: "None"
                  allergies: "Peanuts"
                  medications: false
                  medicalConditions: false
                  medicalConditionsDescription: ""
                  smoke: false
                  drinkAlcohol: false
      responses:
        '200':
          description: Health conditions updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  clientProfile:
                    type: object
        '401':
          description: Unauthorized

  /clients/onboarding/preferences:
    patch:
      tags:
        - client-onboarding
      summary: 'Step 5: Preferences & Logistics'
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OnboardingStep5PreferencesDto'
            examples:
              success:
                value:
                  coachGenderPreference: "No Preference"
                  coachingMode: "Online"
                  budget: "100-200"
                  preferredTime: "Evening"
      responses:
        '200':
          description: Preferences updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  clientProfile:
                    type: object
        '401':
          description: Unauthorized

  # Coach Onboarding Endpoints
  /coaches/onboarding/start:
    post:
      tags:
        - coach-onboarding
      summary: Start coach onboarding process
      security:
        - bearerAuth: []
      responses:
        '201':
          description: Coach profile initialized for onboarding
          content:
            application/json:
              schema:
                type: object
                properties:
                  coachProfile:
                    type: object # Define based on CoachProfile entity
        '401':
          description: Unauthorized

  /coaches/onboarding/bio:
    patch:
      tags:
        - coach-onboarding
      summary: Update coach profile bio during onboarding
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CoachBioDto'
            examples:
              success:
                value:
                  bio: "Experienced coach specializing in HIIT."
      responses:
        '200':
          description: Bio updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  coachProfile:
                    type: object
        '401':
          description: Unauthorized

  /coaches/onboarding/fitness-areas:
    patch:
      tags:
        - coach-onboarding
      summary: Update coach fitness areas during onboarding
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CoachFitnessAreasDto'
            examples:
              success:
                value:
                  fitnessAreas: ["WEIGHT_LOSS", "STRENGTH_TRAINING"]
      responses:
        '200':
          description: Fitness areas updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  coachProfile:
                    type: object
        '401':
          description: Unauthorized

  /coaches/onboarding/profile-picture:
    patch:
      tags:
        - coach-onboarding
      summary: Update coach profile picture during onboarding
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Profile picture updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  coachProfile:
                    type: object
        '400':
          description: No file uploaded
        '401':
          description: Unauthorized

  /coaches/onboarding/certificates:
    post: # Changed from PATCH to POST as per controller
      tags:
        - coach-onboarding
      summary: Upload coach certificates during onboarding
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: binary
                certificatesInfo: # This should be a JSON string
                  type: string
                  example: \'[{"name":"NASM CPT","issuer":"NASM","year":2020},{"name":"Yoga Alliance RYT 200","issuer":"Yoga Alliance","year":2019}]\'
            encoding:
              certificatesInfo:
                contentType: application/json # Clarify this if it's passed differently
      responses:
        '200': # Changed from 201 to 200 as per controller
          description: Certificates uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  coachProfile:
                    type: object
        '400':
          description: No files uploaded or Invalid certificates info format
        '401':
          description: Unauthorized

  /coaches/onboarding/personal-info:
    patch:
      tags:
        - coach-onboarding
      summary: Update coach personal info during onboarding
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CoachPersonalInfoDto'
            examples:
              success:
                value:
                  gender: "FEMALE"
                  age: 30
                  location: "London, UK"
                  yearsOfExperience: 5
                  specialization: "Yoga and Mindfulness"
                  hourlyRate: 60
      responses:
        '200':
          description: Personal information updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  coachProfile:
                    type: object
        '401':
          description: Unauthorized

  /coaches/onboarding/complete:
    post:
      tags:
        - coach-onboarding
      summary: Complete coach onboarding process
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Coach onboarding completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Coach onboarding completed successfully"
                  coachProfile:
                    type: object
        '400':
          description: Onboarding incomplete. Missing fields
        '401':
          description: Unauthorized

  /coaches/onboarding/status:
    get:
      tags:
        - coach-onboarding
      summary: Get onboarding status and completion percentage
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Returns onboarding completion status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoachOnboardingStatusResponseDto'
        '401':
          description: Unauthorized

components:
  schemas:
    RegisterDto:
      type: object
      required:
        - firstName
        - lastName
        - email
        - phone
        - password
      properties:
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          format: email
          example: john.doe@example.com
        phone:
          type: string
          example: "+12025550179" # Assuming E.164 format
        password:
          type: string
          format: password
          minLength: 8
          example: Password123!
        role:
          type: string
          enum: [USER, ADMIN, COACH] # Adjust as per your UserRole enum
          example: USER
          default: USER

    LoginDto:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: john.doe@example.com
        password:
          type: string
          format: password
          example: Password123!

    RefreshTokenDto:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    AuthResponseDto:
      type: object
      properties:
        user:
          type: object # Define based on your User entity structure excluding sensitive fields
          properties:
            id:
              type: string
              format: uuid
            firstName:
              type: string
            lastName:
              type: string
            email:
              type: string
              format: email
            phone:
              type: string
            role:
              type: string
            # Add other relevant user fields
        accessToken:
          type: string
        refreshToken:
          type: string

    TokenResponseDto:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string

    RequestEmailVerificationDto:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          example: john.doe@example.com

    VerifyEmailDto:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          format: uuid # Based on your DTO
          example: "123e4567-e89b-12d3-a456-426614174000"

    RequestPhoneVerificationDto:
      type: object
      required:
        - phone
      properties:
        phone:
          type: string
          example: "+12025550179" # Assuming E.164 format

    VerifyPhoneDto:
      type: object
      required:
        - code
        - phone
      properties:
        code:
          type: string
          example: "123456"
          minLength: 6
          maxLength: 6
        phone:
          type: string
          example: "+12025550179"

    # Client Onboarding DTOs
    OnboardingStep1ProfileDto:
      type: object
      required:
        - gender
        - location
        - age
        - weight
        - height
        - fitnessGoal
      properties:
        gender:
          type: string
          enum: [male, female, other, prefer_not_to_say]
          example: male
        location:
          type: string
          example: "Riyadh, Saudi Arabia"
        age:
          type: integer
          minimum: 10
          maximum: 120
          example: 28
        weight:
          type: number
          minimum: 20
          maximum: 300
          example: 75
        height:
          type: number
          minimum: 50
          maximum: 250
          example: 175
        fitnessGoal:
          type: string
          example: "Lose weight"

    OnboardingStep2FitnessGoalsDto:
      type: object
      required:
        - fitnessGoals
        - fitnessLevel
        - bodyShape
      properties:
        fitnessGoals:
          type: string
          example: "Lose weight, Build muscle"
        otherGoal:
          type: string
          nullable: true
          example: "Run a marathon"
        fitnessLevel:
          type: string
          enum: [Rookie, Warrior, Legend]
          example: Rookie
        bodyShape:
          type: string
          example: "Athletic"

    OnboardingStep3DietaryDto:
      type: object
      required:
        - mealsPerDay
        - specificDiet
        - exerciseFrequency
        - sessionDuration
        - gymAccess
      properties:
        mealsPerDay:
          type: integer
          example: 3
        specificDiet:
          type: boolean
          example: false
        exerciseFrequency:
          type: integer
          example: 4
        sessionDuration:
          type: integer
          example: 60
        gymAccess:
          type: boolean
          example: true

    OnboardingStep4HealthDto:
      type: object
      required:
        - medications
        - medicalConditions
        - smoke
        - drinkAlcohol
      properties:
        healthConsiderations:
          type: string
          nullable: true
          example: "Previous knee injury"
        allergies:
          type: string
          nullable: true
          example: "Lactose intolerant"
        medications:
          type: boolean
          example: false
        medicalConditions:
          type: boolean
          example: false
        medicalConditionsDescription:
          type: string
          nullable: true
          example: "Asthma"
        smoke:
          type: boolean
          example: false
        drinkAlcohol:
          type: boolean
          example: false

    OnboardingStep5PreferencesDto:
      type: object
      required:
        - coachGenderPreference
        - coachingMode
        - preferredTime
      properties:
        coachGenderPreference:
          type: string
          enum: [Male, Female, "No Preference"]
          example: "No Preference"
        coachingMode:
          type: string
          enum: ["In-Person", Online, Either]
          example: Online
        budget:
          type: string
          nullable: true
          example: "100-200"
        preferredTime:
          type: string
          enum: [Morning, Afternoon, Evening, Flexible]
          example: Evening

    # Coach Onboarding DTOs
    CoachBioDto:
      type: object
      required:
        - bio
      properties:
        bio:
          type: string
          example: "Certified personal trainer with 5+ years of experience."

    CoachFitnessAreasDto:
      type: object
      required:
        - fitnessAreas
      properties:
        fitnessAreas:
          type: array
          items:
            type: string
            enum: # Add your FitnessArea enum values here
              - WEIGHT_LOSS
              - STRENGTH_TRAINING
              - NUTRITION
              - CARDIO
              - FLEXIBILITY_MOBILITY
              - SPORTS_SPECIFIC_TRAINING
              - GROUP_FITNESS
              - PRE_POST_NATAL_FITNESS
              - SENIOR_FITNESS
              - YOUTH_FITNESS
              - REHABILITATION
              - MIND_BODY
              - ENDURANCE_TRAINING
              - BODYBUILDING
              - FUNCTIONAL_TRAINING
              - HIIT
              - ONLINE_COACHING
              - OTHER
          example: ["WEIGHT_LOSS", "STRENGTH_TRAINING"]

    CoachPersonalInfoDto:
      type: object
      required:
        - gender
        - age
        - location
        - yearsOfExperience
        - specialization
        - hourlyRate
      properties:
        gender:
          type: string
          enum: [MALE, FEMALE, OTHER, PREFER_NOT_TO_SAY] # From coach-profile.entity.ts
          example: "MALE"
        age:
          type: integer
          minimum: 18
          maximum: 100
          example: 30
        location:
          type: string
          example: "New York, NY, USA"
        yearsOfExperience:
          type: integer # Changed from number to integer for consistency
          minimum: 0
          maximum: 100
          example: 5
        specialization:
          type: string
          example: "Weight loss and nutrition"
        hourlyRate:
          type: number # Assuming it can be decimal
          minimum: 0
          example: 50

    CoachCertificatesUploadDto: # For the request body of /coaches/onboarding/certificates
      type: object
      properties:
        files: # This part is handled by multipart/form-data directly in paths
          type: array
          items:
            type: string
            format: binary
        certificatesInfo: # This is the JSON string part
          type: string
          description: "JSON string of an array of certificate details."
          example: \'[{"name":"NASM CPT","issuer":"NASM","year":2020,"description":"Certified Personal Trainer"},{"name":"Precision Nutrition L1","issuer":"Precision Nutrition","year":2021}]\'

    CoachOnboardingStatusResponseDto:
      type: object
      properties:
        completionPercentage:
          type: integer
          example: 75
        completedFields:
          type: integer
          example: 6
        totalFields:
          type: integer
          example: 8
        isComplete:
          type: boolean
          example: false

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
